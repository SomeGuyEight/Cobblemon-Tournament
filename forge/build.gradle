plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'org.jetbrains.kotlin.jvm' version "2.0.0"
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.0'
}
loom {
    silentMojangMappingsLicense()
    forge {
        //todo
        //mixinConfig "template-common.mixins.json"
        //mixinConfig "template-forge.mixins.json"
    }
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    implementation "thedarkcolour:kotlinforforge:${rootProject.kotlin_for_forge_version}"
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    modImplementation "com.cobblemon:forge:${rootProject.cobblemon_version}"

    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:${rootProject.parchment_version}")
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set(shadowJar.archiveFile)
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories { }
}
